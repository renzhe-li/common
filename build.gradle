buildscript {
    repositories {
    	maven{ url 'http://maven.aliyun.com/nexus/content/groups/public' }
        jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

group = "com.allin.common"

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
	baseName = 'common'
	from { 
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) };
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

dependencies {
	// logs
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	
	compile group: 'org.dom4j', name: 'dom4j', version: '2.1.0'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'

	// unit test
    testCompile group: 'org.testng', name: 'testng', version: '6.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.9'
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG() 
	testLogging {
		showStandardStreams = true
	}
}

findbugsMain {
	reports {
		xml.enabled = true
		html.enabled = false
	}
	ignoreFailures = true
}

findbugsTest {
	reports {
		xml.enabled = true
		html.enabled = false
	}
	ignoreFailures = true
}

pmd {
    toolVersion = '5.7.0'
	ruleSets =
		[
			"java-basic",
			"java-braces",
			"java-clone",
			"java-codesize",
			"java-design",
			"java-finalizers",
			"java-imports",
			"java-j2ee",
			"java-javabeans",
			"java-junit",
			"java-migrating",
			"java-optimizations",
			"java-strictexception",
			"java-strings",
			"java-sunsecure",
			"java-typeresolution",
			"java-unusedcode"
		]
	ignoreFailures = true
}

jacoco {
    toolVersion = "0.7.7.201606060606"

}
jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
    reports {
          xml {
            enabled true
            destination "${buildDir}/reports/jacoco/jacoco.xml"
          }
          csv.enabled false
          html {
            enabled true
            destination "${buildDir}/reports/jacoco/jacocoHtml"
          }
      }
}

check.dependsOn jacocoTestReport